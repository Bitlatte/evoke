// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: proto/plugin.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PluginClient is the client API for Plugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PluginClient interface {
	// Called once before the entire build process begins.
	// Useful for setup tasks or pre-build validation.
	OnPreBuild(ctx context.Context, in *PreBuildRequest, opts ...grpc.CallOption) (*PreBuildResponse, error)
	// Called after the configuration file (evoke.yaml) is loaded.
	// Allows plugins to read or even modify the configuration.
	OnConfigLoaded(ctx context.Context, in *ConfigLoadedRequest, opts ...grpc.CallOption) (*ConfigLoadedResponse, error)
	// Called after the 'public' directory has been copied to 'dist'.
	OnPublicAssetsCopied(ctx context.Context, in *PublicAssetsCopiedRequest, opts ...grpc.CallOption) (*PublicAssetsCopiedResponse, error)
	// Called for each content file after it's read from disk but before any processing.
	// Allows modification of the raw file content.
	OnContentLoaded(ctx context.Context, in *ContentFile, opts ...grpc.CallOption) (*ContentFile, error)
	// Called before the Markdown (or other format) content is rendered to HTML.
	// A plugin could use this to implement a custom renderer.
	OnContentRender(ctx context.Context, in *ContentFile, opts ...grpc.CallOption) (*ContentFile, error)
	// Called after content is rendered to HTML but before it's placed in a layout.
	// Useful for post-processing the core HTML content.
	OnHTMLRendered(ctx context.Context, in *ContentFile, opts ...grpc.CallOption) (*ContentFile, error)
	// Called once after all content has been processed and written to disk.
	OnPostBuild(ctx context.Context, in *PostBuildRequest, opts ...grpc.CallOption) (*PostBuildResponse, error)
	// Called to register custom pipelines.
	RegisterPipelines(ctx context.Context, in *RegisterPipelinesRequest, opts ...grpc.CallOption) (*RegisterPipelinesResponse, error)
	// Called to process an asset with a custom pipeline.
	ProcessAsset(ctx context.Context, in *Asset, opts ...grpc.CallOption) (*Asset, error)
}

type pluginClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginClient(cc grpc.ClientConnInterface) PluginClient {
	return &pluginClient{cc}
}

func (c *pluginClient) OnPreBuild(ctx context.Context, in *PreBuildRequest, opts ...grpc.CallOption) (*PreBuildResponse, error) {
	out := new(PreBuildResponse)
	err := c.cc.Invoke(ctx, "/proto.Plugin/OnPreBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) OnConfigLoaded(ctx context.Context, in *ConfigLoadedRequest, opts ...grpc.CallOption) (*ConfigLoadedResponse, error) {
	out := new(ConfigLoadedResponse)
	err := c.cc.Invoke(ctx, "/proto.Plugin/OnConfigLoaded", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) OnPublicAssetsCopied(ctx context.Context, in *PublicAssetsCopiedRequest, opts ...grpc.CallOption) (*PublicAssetsCopiedResponse, error) {
	out := new(PublicAssetsCopiedResponse)
	err := c.cc.Invoke(ctx, "/proto.Plugin/OnPublicAssetsCopied", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) OnContentLoaded(ctx context.Context, in *ContentFile, opts ...grpc.CallOption) (*ContentFile, error) {
	out := new(ContentFile)
	err := c.cc.Invoke(ctx, "/proto.Plugin/OnContentLoaded", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) OnContentRender(ctx context.Context, in *ContentFile, opts ...grpc.CallOption) (*ContentFile, error) {
	out := new(ContentFile)
	err := c.cc.Invoke(ctx, "/proto.Plugin/OnContentRender", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) OnHTMLRendered(ctx context.Context, in *ContentFile, opts ...grpc.CallOption) (*ContentFile, error) {
	out := new(ContentFile)
	err := c.cc.Invoke(ctx, "/proto.Plugin/OnHTMLRendered", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) OnPostBuild(ctx context.Context, in *PostBuildRequest, opts ...grpc.CallOption) (*PostBuildResponse, error) {
	out := new(PostBuildResponse)
	err := c.cc.Invoke(ctx, "/proto.Plugin/OnPostBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) RegisterPipelines(ctx context.Context, in *RegisterPipelinesRequest, opts ...grpc.CallOption) (*RegisterPipelinesResponse, error) {
	out := new(RegisterPipelinesResponse)
	err := c.cc.Invoke(ctx, "/proto.Plugin/RegisterPipelines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) ProcessAsset(ctx context.Context, in *Asset, opts ...grpc.CallOption) (*Asset, error) {
	out := new(Asset)
	err := c.cc.Invoke(ctx, "/proto.Plugin/ProcessAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginServer is the server API for Plugin service.
// All implementations must embed UnimplementedPluginServer
// for forward compatibility
type PluginServer interface {
	// Called once before the entire build process begins.
	// Useful for setup tasks or pre-build validation.
	OnPreBuild(context.Context, *PreBuildRequest) (*PreBuildResponse, error)
	// Called after the configuration file (evoke.yaml) is loaded.
	// Allows plugins to read or even modify the configuration.
	OnConfigLoaded(context.Context, *ConfigLoadedRequest) (*ConfigLoadedResponse, error)
	// Called after the 'public' directory has been copied to 'dist'.
	OnPublicAssetsCopied(context.Context, *PublicAssetsCopiedRequest) (*PublicAssetsCopiedResponse, error)
	// Called for each content file after it's read from disk but before any processing.
	// Allows modification of the raw file content.
	OnContentLoaded(context.Context, *ContentFile) (*ContentFile, error)
	// Called before the Markdown (or other format) content is rendered to HTML.
	// A plugin could use this to implement a custom renderer.
	OnContentRender(context.Context, *ContentFile) (*ContentFile, error)
	// Called after content is rendered to HTML but before it's placed in a layout.
	// Useful for post-processing the core HTML content.
	OnHTMLRendered(context.Context, *ContentFile) (*ContentFile, error)
	// Called once after all content has been processed and written to disk.
	OnPostBuild(context.Context, *PostBuildRequest) (*PostBuildResponse, error)
	// Called to register custom pipelines.
	RegisterPipelines(context.Context, *RegisterPipelinesRequest) (*RegisterPipelinesResponse, error)
	// Called to process an asset with a custom pipeline.
	ProcessAsset(context.Context, *Asset) (*Asset, error)
	mustEmbedUnimplementedPluginServer()
}

// UnimplementedPluginServer must be embedded to have forward compatible implementations.
type UnimplementedPluginServer struct {
}

func (UnimplementedPluginServer) OnPreBuild(context.Context, *PreBuildRequest) (*PreBuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnPreBuild not implemented")
}
func (UnimplementedPluginServer) OnConfigLoaded(context.Context, *ConfigLoadedRequest) (*ConfigLoadedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnConfigLoaded not implemented")
}
func (UnimplementedPluginServer) OnPublicAssetsCopied(context.Context, *PublicAssetsCopiedRequest) (*PublicAssetsCopiedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnPublicAssetsCopied not implemented")
}
func (UnimplementedPluginServer) OnContentLoaded(context.Context, *ContentFile) (*ContentFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnContentLoaded not implemented")
}
func (UnimplementedPluginServer) OnContentRender(context.Context, *ContentFile) (*ContentFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnContentRender not implemented")
}
func (UnimplementedPluginServer) OnHTMLRendered(context.Context, *ContentFile) (*ContentFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnHTMLRendered not implemented")
}
func (UnimplementedPluginServer) OnPostBuild(context.Context, *PostBuildRequest) (*PostBuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnPostBuild not implemented")
}
func (UnimplementedPluginServer) RegisterPipelines(context.Context, *RegisterPipelinesRequest) (*RegisterPipelinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPipelines not implemented")
}
func (UnimplementedPluginServer) ProcessAsset(context.Context, *Asset) (*Asset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessAsset not implemented")
}
func (UnimplementedPluginServer) mustEmbedUnimplementedPluginServer() {}

// UnsafePluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginServer will
// result in compilation errors.
type UnsafePluginServer interface {
	mustEmbedUnimplementedPluginServer()
}

func RegisterPluginServer(s grpc.ServiceRegistrar, srv PluginServer) {
	s.RegisterService(&Plugin_ServiceDesc, srv)
}

func _Plugin_OnPreBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).OnPreBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Plugin/OnPreBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).OnPreBuild(ctx, req.(*PreBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_OnConfigLoaded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigLoadedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).OnConfigLoaded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Plugin/OnConfigLoaded",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).OnConfigLoaded(ctx, req.(*ConfigLoadedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_OnPublicAssetsCopied_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicAssetsCopiedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).OnPublicAssetsCopied(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Plugin/OnPublicAssetsCopied",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).OnPublicAssetsCopied(ctx, req.(*PublicAssetsCopiedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_OnContentLoaded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContentFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).OnContentLoaded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Plugin/OnContentLoaded",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).OnContentLoaded(ctx, req.(*ContentFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_OnContentRender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContentFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).OnContentRender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Plugin/OnContentRender",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).OnContentRender(ctx, req.(*ContentFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_OnHTMLRendered_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContentFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).OnHTMLRendered(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Plugin/OnHTMLRendered",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).OnHTMLRendered(ctx, req.(*ContentFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_OnPostBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).OnPostBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Plugin/OnPostBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).OnPostBuild(ctx, req.(*PostBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_RegisterPipelines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPipelinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).RegisterPipelines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Plugin/RegisterPipelines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).RegisterPipelines(ctx, req.(*RegisterPipelinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_ProcessAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Asset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).ProcessAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Plugin/ProcessAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).ProcessAsset(ctx, req.(*Asset))
	}
	return interceptor(ctx, in, info, handler)
}

// Plugin_ServiceDesc is the grpc.ServiceDesc for Plugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Plugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Plugin",
	HandlerType: (*PluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnPreBuild",
			Handler:    _Plugin_OnPreBuild_Handler,
		},
		{
			MethodName: "OnConfigLoaded",
			Handler:    _Plugin_OnConfigLoaded_Handler,
		},
		{
			MethodName: "OnPublicAssetsCopied",
			Handler:    _Plugin_OnPublicAssetsCopied_Handler,
		},
		{
			MethodName: "OnContentLoaded",
			Handler:    _Plugin_OnContentLoaded_Handler,
		},
		{
			MethodName: "OnContentRender",
			Handler:    _Plugin_OnContentRender_Handler,
		},
		{
			MethodName: "OnHTMLRendered",
			Handler:    _Plugin_OnHTMLRendered_Handler,
		},
		{
			MethodName: "OnPostBuild",
			Handler:    _Plugin_OnPostBuild_Handler,
		},
		{
			MethodName: "RegisterPipelines",
			Handler:    _Plugin_RegisterPipelines_Handler,
		},
		{
			MethodName: "ProcessAsset",
			Handler:    _Plugin_ProcessAsset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/plugin.proto",
}
