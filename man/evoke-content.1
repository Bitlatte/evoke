.\" Automatically generated by Pandoc 3.7.0.2
.\"
.TH "" "" "" ""
.SH Content
Evoke supports both Markdown and HTML for creating content, giving you
the flexibility to choose the best format for your needs.
.SS Markdown (\f[CR].md\f[R])
Markdown is a lightweight markup language that is perfect for writing
content like blog posts, articles, and documentation.
Evoke uses the Goldmark library to convert your Markdown files to HTML.
.SS Example
.IP
.EX
# My First Page

This is a paragraph. I can use **bold** and *italic* text.

\- This is a list item.
\- This is another list item.
.EE
.SS HTML (\f[CR].html\f[R])
For more complex layouts or when you need precise control over the
output, you can use standard HTML files.
Any template syntax within these files will be processed by Evoke.
.SS Example
.IP
.EX
<\f[B]h1\f[R]>My First Page</\f[B]h1\f[R]>
<\f[B]p\f[R]>This is a standard HTML page.</\f[B]p\f[R]>
.EE
.SS Routing
Evoke creates routes based on the file and directory structure within
your \f[CR]content\f[R] directory.
For example, consider the following structure:
.IP
.EX
content/
├── about.md
└── blog/
    ├── post\-1.md
    └── post\-2.html
.EE
.PP
This will generate the following pages:
.IP \(bu 2
\f[CR]/about.html\f[R]
.IP \(bu 2
\f[CR]/blog/post\-1.html\f[R]
.IP \(bu 2
\f[CR]/blog/post\-2.html\f[R]
.SS Frontmatter
You can add metadata to your Markdown files using YAML frontmatter.
This is a block of YAML at the top of the file, enclosed in
triple\-dashed lines (\f[CR]\-\-\-\f[R]).
.PP
Frontmatter allows you to define variables that can be accessed in your
templates.
This is useful for setting page titles, authors, dates, and other custom
data.
.SS Example
Here\(cqs an example of a Markdown file with frontmatter:
.IP
.EX
\f[I]\-\-\-\f[R]
\f[BI]title:\f[R]\f[I] \(dqMy First Blog Post\(dq\f[R]
\f[BI]author:\f[R]\f[I] \(dqJane Doe\(dq\f[R]
\f[BI]date:\f[R]\f[I] \(dq2024\-07\-08\(dq\f[R]
\f[BI]tags:\f[R]\f[I] [\(dqtech\(dq, \(dqgolang\(dq]\f[R]
\f[I]\-\-\-\f[R]

# My First Blog Post

This is the content of my blog post.
.EE
.SS Accessing Frontmatter in Templates
You can access these variables in your templates using the
\f[CR].Page\f[R] object.
For example, to display the title and author in a layout:
.IP
.EX
<!DOCTYPE html>
<\f[B]html\f[R]>
<\f[B]head\f[R]>
  <\f[B]title\f[R]>{{ .Page.title }}</\f[B]title\f[R]>
</\f[B]head\f[R]>
<\f[B]body\f[R]>
  <\f[B]h1\f[R]>{{ .Page.title }}</\f[B]h1\f[R]>
  <\f[B]p\f[R]>By {{ .Page.author }} on {{ .Page.date }}</\f[B]p\f[R]>

  <\f[B]div\f[R]>
    {{ .Content }}
  </\f[B]div\f[R]>
</\f[B]body\f[R]>
</\f[B]html\f[R]>
.EE
.PP
In this example, \f[CR]{{ .Content }}\f[R] is a special variable that
contains the rendered HTML of the Markdown content.
.PP
Frontmatter is supported for both Markdown and HTML files.
.SS Layouts
Evoke uses a simple layout system to help you create consistent page
structures.
By default, Evoke will look for a \f[CR]_layout.html\f[R] file in the
same directory as your content file.
If it doesn\(cqt find one, it will look in the parent directory, and so
on, all the way up to the \f[CR]content\f[R] directory.
.SS Example
Consider the following directory structure:
.IP
.EX
content/
├── _layout.html
└── blog/
    ├── _layout.html
    └── post\-1.md
.EE
.PP
In this example, \f[CR]post\-1.md\f[R] will be rendered using the
\f[CR]blog/_layout.html\f[R] file.
If \f[CR]blog/_layout.html\f[R] didn\(cqt exist, it would be rendered
using \f[CR]content/_layout.html\f[R].
.PP
This allows you to create a default layout for your entire site, and
then override it for specific sections of your site.
