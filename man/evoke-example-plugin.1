.\" Automatically generated by Pandoc 3.7.0.2
.\"
.TH "" "" "" ""
.SH Example Plugin: Modify Content
In this example, we\(cqll create a plugin that modifies the content of a
page before it\(cqs rendered.
This plugin will find all instances of the word \(lqHello\(rq and
replace them with \(lqHello from our plugin!\(rq.
.SS 1. Create the Plugin Directory
First, create a directory for the plugin:
.IP
.EX
mkdir \-p plugins/modifier
.EE
.SS 2. Create the \f[CR]main.go\f[R] File
Next, create a \f[CR]main.go\f[R] file inside
\f[CR]plugins/modifier\f[R]:
.IP
.EX
\f[B]package\f[R] main

\f[B]import\f[R] (
    \(dqbytes\(dq
    \(dqcontext\(dq

    \(dqgithub.com/Bitlatte/evoke/pkg/plugins\(dq
    \(dqgithub.com/Bitlatte/evoke/proto\(dq
    \(dqgithub.com/hashicorp/go\-plugin\(dq
)

\f[I]// Here is a real implementation of the plugin.\f[R]
\f[B]type\f[R] ModifierPlugin \f[B]struct\f[R]{}

\f[B]func\f[R] (p *ModifierPlugin) OnPreBuild(ctx context.Context, req *proto.OnPreBuildRequest) (*proto.OnPreBuildResponse, error) {
    \f[B]return\f[R] &proto.OnPreBuildResponse{}, nil
}

\f[B]func\f[R] (p *ModifierPlugin) OnConfigLoaded(ctx context.Context, req *proto.OnConfigLoadedRequest) (*proto.OnConfigLoadedResponse, error) {
    \f[B]return\f[R] &proto.OnConfigLoadedResponse{Config: req.Config}, nil
}

\f[B]func\f[R] (p *ModifierPlugin) OnPublicAssetsCopied(ctx context.Context, req *proto.OnPublicAssetsCopiedRequest) (*proto.OnPublicAssetsCopiedResponse, error) {
    \f[B]return\f[R] &proto.OnPublicAssetsCopiedResponse{}, nil
}

\f[B]func\f[R] (p *ModifierPlugin) OnContentLoaded(ctx context.Context, req *proto.OnContentLoadedRequest) (*proto.OnContentLoadedResponse, error) {
    newContent := bytes.ReplaceAll(req.Content, []byte(\(dqHello\(dq), []byte(\(dqHello from our plugin!\(dq))
    \f[B]return\f[R] &proto.OnContentLoadedResponse{Content: newContent}, nil
}

\f[B]func\f[R] (p *ModifierPlugin) OnContentRender(ctx context.Context, req *proto.OnContentRenderRequest) (*proto.OnContentRenderResponse, error) {
    \f[B]return\f[R] &proto.OnContentRenderResponse{Content: req.Content}, nil
}

\f[B]func\f[R] (p *ModifierPlugin) OnHTMLRendered(ctx context.Context, req *proto.OnHTMLRenderedRequest) (*proto.OnHTMLRenderedResponse, error) {
    \f[B]return\f[R] &proto.OnHTMLRenderedResponse{Content: req.Content}, nil
}

\f[B]func\f[R] (p *ModifierPlugin) OnPostBuild(ctx context.Context, req *proto.OnPostBuildRequest) (*proto.OnPostBuildResponse, error) {
    \f[B]return\f[R] &proto.OnPostBuildResponse{}, nil
}

\f[B]func\f[R] main() {
    plugin.Serve(&plugin.ServeConfig{
        HandshakeConfig: plugins.Handshake,
        Plugins: \f[B]map\f[R][string]plugin.Plugin{
            \(dqevoke\(dq: &plugins.EvokePlugin{Impl: &ModifierPlugin{}},
        },
        GRPCServer: plugin.DefaultGRPCServer,
    })
}
.EE
.PP
This code defines a new plugin that implements the
\f[CR]OnContentLoaded\f[R] hook.
This hook will be called for each content file after it\(cqs read from
disk, and it will replace all instances of \(lqHello\(rq with \(lqHello
from our plugin!\(rq.
.SS 3. Build the Plugin
Now, build the plugin as a Go executable:
.IP
.EX
go build \-o plugins/modifier/modifier plugins/modifier/main.go
.EE
.PP
This will create the \f[CR]modifier\f[R] executable file in your
\f[CR]plugins/modifier\f[R] directory.
.SS 4. Use the New Plugin
First, create a content file with the word \(lqHello\(rq in it.
For example, create \f[CR]content/index.html\f[R] with the following
content:
.IP
.EX
<\f[B]h1\f[R]>Hello, World!</\f[B]h1\f[R]>
.EE
.PP
Then, run a build:
.IP
.EX
evoke build
.EE
.PP
Now, if you open the \f[CR]dist/index.html\f[R] file, you should see
that the content has been modified:
\(ga\(ga\(gahtml
Hello from our plugin!, World!
