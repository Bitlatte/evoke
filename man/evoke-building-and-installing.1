.\" Automatically generated by Pandoc 3.7.0.2
.\"
.TH "" "" "" ""
.SH Building and Installing Plugins
This guide explains how to build your plugins into executables that
Evoke can use and how to install them in your project.
.SS Building Your Plugin
Evoke plugins are compiled as standalone executables.
To build your plugin, navigate to your project\(cqs root directory and
use the \f[CR]go build\f[R] command.
.SS Example
Let\(cqs say you have a plugin located in
\f[CR]plugins/my\-plugin/main.go\f[R].
You would build it with the following command:
.IP
.EX
go build \-o plugins/my\-plugin/my\-plugin plugins/my\-plugin/main.go
.EE
.PP
This command does the following:
.IP \(bu 2
\f[CR]go build\f[R]: The standard Go command to compile packages and
dependencies.
.IP \(bu 2
\f[CR]\-o plugins/my\-plugin/my\-plugin\f[R]: This specifies the output
file name and location.
By convention, place the compiled plugin directly in the plugin\(cqs
directory.
.IP \(bu 2
\f[CR]plugins/my\-plugin/main.go\f[R]: This is the path to your
plugin\(cqs source code.
.SS Installing Your Plugin
Once you have built your plugin, it is already \(lqinstalled\(rq and
ready to be used by Evoke.
Evoke automatically discovers and loads any executable files found in
the \f[CR]plugins\f[R] directory.
.PP
There are no further steps required.
The next time you run an \f[CR]evoke\f[R] command, your plugin\(cqs
hooks will be active.
.SS Cross\-Compilation
If you are developing a plugin that you want to distribute to others,
you will need to compile it for different operating systems and
architectures.
You can do this by setting the \f[CR]GOOS\f[R] and \f[CR]GOARCH\f[R]
environment variables before running the \f[CR]go build\f[R] command.
.PP
For example, to build your plugin for Windows, you would run the
following command:
.IP
.EX
GOOS=windows GOARCH=amd64 go build \-o plugins/my\-plugin/my\-plugin.exe plugins/my\-plugin/main.go
.EE
.PP
To build your plugin for Linux, you would run the following command:
.IP
.EX
GOOS=linux GOARCH=amd64 go build \-o plugins/my\-plugin/my\-plugin plugins/my\-plugin/main.go
.EE
.SS Distributing Your Plugin
Once you have built your plugin for different operating systems and
architectures, you can distribute it to others.
The easiest way to do this is to create a zip file containing the
compiled plugin and any other assets that it needs.
.PP
You can then share this zip file with others, and they can install it by
unzipping it into their project\(cqs \f[CR]plugins\f[R] directory.
