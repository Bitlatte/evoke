.\" Automatically generated by Pandoc 3.7.0.2
.\"
.TH "" "" "" ""
.SH Partials
Partials are reusable HTML snippets that help you keep your code DRY
(Don\(cqt Repeat Yourself).
They are stored in the \f[CR]partials\f[R] directory and can be included
in your layouts and content files.
.SS Creating a Partial
To create a partial, simply create an HTML file in the
\f[CR]partials\f[R] directory.
.SS Example: \f[CR]partials/header.html\f[R]
.IP
.EX
<\f[B]header\f[R]>
  <\f[B]h1\f[R]>{{ .Global.siteName }}</\f[B]h1\f[R]>
  <\f[B]p\f[R]>Welcome to my awesome site!</\f[B]p\f[R]>
</\f[B]header\f[R]>
.EE
.SS Using a Partial
To include a partial, use the \f[CR]template\f[R] keyword.
The \f[CR].\f[R] (dot) passes the current context (e.g., page variables,
site configuration) to the partial.
.SS Example: \f[CR]content/_layout.html\f[R]
.IP
.EX
<!DOCTYPE html>
<\f[B]html\f[R] lang=\(dqen\(dq>
<\f[B]head\f[R]>
  <\f[B]meta\f[R] charset=\(dqUTF\-8\(dq />
  <\f[B]title\f[R]>{{ .Page.title }}</\f[B]title\f[R]>
</\f[B]head\f[R]>
<\f[B]body\f[R]>
  {{ template \(dqheader.html\(dq . }}

  <\f[B]main\f[R]>
    {{ .Content }}
  </\f[B]main\f[R]>

  {{ template \(dqfooter.html\(dq . }}
</\f[B]body\f[R]>
</\f[B]html\f[R]>
.EE
.SS Passing Custom Data to Partials
You can also pass custom data to a partial.
This is useful for creating reusable components that can be customized
on a per\-page basis.
.SS Example: A \f[CR]card\f[R] Partial
Let\(cqs create a partial to display a card with a title and content.
.PP
\f[CR]partials/card.html\f[R]:
.IP
.EX
<\f[B]div\f[R] class=\(dqcard\(dq>
  <\f[B]h2\f[R]>{{ .Title }}</\f[B]h2\f[R]>
  <\f[B]p\f[R]>{{ .Content }}</\f[B]p\f[R]>
</\f[B]div\f[R]>
.EE
.PP
Now, you can use this partial in your content files and pass data to it
using the \f[CR]dict\f[R] function:
.PP
\f[CR]content/index.md\f[R]:
.IP
.EX
\-\-\-
title: \(dqHome Page\(dq
\-\-\-

# Welcome to the Home Page

Here are some featured items:

{{ template \(dqcard.html\(dq (dict \(dqTitle\(dq \(dqCard 1\(dq \(dqContent\(dq \(dqThis is the first card.\(dq) }}
{{ template \(dqcard.html\(dq (dict \(dqTitle\(dq \(dqCard 2\(dq \(dqContent\(dq \(dqThis is the second card.\(dq) }}
.EE
.SS Looping with Partials
Partials are also great for rendering lists of items.
For example, you could loop through a list of blog posts and render a
partial for each one.
.SS Example: Listing Blog Posts
Imagine you have a list of posts in your \f[CR]evoke.yaml\f[R]:
.IP
.EX
posts\f[B]:\f[R]
  \f[B]\-\f[R] title\f[B]:\f[R] \(dqPost 1\(dq
    url\f[B]:\f[R] \(dq/blog/post\-1\(dq
  \f[B]\-\f[R] title\f[B]:\f[R] \(dqPost 2\(dq
    url\f[B]:\f[R] \(dq/blog/post\-2\(dq
.EE
.PP
You can then loop through these posts in your template and render a
partial for each one:
.PP
\f[CR]content/blog.html\f[R]:
.IP
.EX
<\f[B]h1\f[R]>Blog</\f[B]h1\f[R]>
<\f[B]ul\f[R]>
  {{ range .Global.posts }}
    {{ template \(dqpost\-summary.html\(dq . }}
  {{ end }}
</\f[B]ul\f[R]>
.EE
.PP
\f[CR]partials/post\-summary.html\f[R]:
.IP
.EX
<\f[B]li\f[R]>
  <\f[B]a\f[R] href=\(dq{{ .url }}\(dq>{{ .title }}</\f[B]a\f[R]>
</\f[B]li\f[R]>
.EE
.PP
This powerful combination of partials, data, and loops allows you to
build complex and maintainable websites with ease.
.SS Nested Partials
You can also nest partials within other partials.
This is useful for creating complex components from smaller, more
manageable pieces.
.SS Example: A \f[CR]profile\f[R] Partial
Let\(cqs create a \f[CR]profile\f[R] partial that uses a \f[CR]card\f[R]
partial.
.PP
\f[CR]partials/profile.html\f[R]:
.IP
.EX
<\f[B]div\f[R] class=\(dqprofile\(dq>
  {{ template \(dqcard.html\(dq (dict \(dqTitle\(dq .Page.Name \(dqContent\(dq .Page.Bio) }}
</\f[B]div\f[R]>
.EE
.PP
Now, you can use the \f[CR]profile\f[R] partial in your content files:
.PP
\f[CR]content/about.md\f[R]:
.SS \(ga\(ga\(gamarkdown
title: \(lqAbout Me\(rq Name: \(lqJohn Doe\(rq Bio: \(lqI am a web
developer.\(rq \(em
.SH About Me
{{ template \(lqprofile.html\(rq .
}}
